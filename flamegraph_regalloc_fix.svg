<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="647"><g><title>perf (5 samples, 0.77%)</title><rect x="0.0000%" y="469" width="0.7728%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.77%)</title><rect x="0.0000%" y="453" width="0.7728%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="463.50"></text></g><g><title>do_syscall_64 (5 samples, 0.77%)</title><rect x="0.0000%" y="437" width="0.7728%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="447.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.77%)</title><rect x="0.0000%" y="421" width="0.7728%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="431.50"></text></g><g><title>__do_execve_file.isra.0 (5 samples, 0.77%)</title><rect x="0.0000%" y="405" width="0.7728%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="415.50"></text></g><g><title>search_binary_handler (5 samples, 0.77%)</title><rect x="0.0000%" y="389" width="0.7728%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="399.50"></text></g><g><title>load_elf_binary (5 samples, 0.77%)</title><rect x="0.0000%" y="373" width="0.7728%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="383.50"></text></g><g><title>setup_new_exec (5 samples, 0.77%)</title><rect x="0.0000%" y="357" width="0.7728%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="367.50"></text></g><g><title>perf_event_exec (5 samples, 0.77%)</title><rect x="0.0000%" y="341" width="0.7728%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="351.50"></text></g><g><title>ctx_resched (5 samples, 0.77%)</title><rect x="0.0000%" y="325" width="0.7728%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="335.50"></text></g><g><title>perf_pmu_enable.part.0 (5 samples, 0.77%)</title><rect x="0.0000%" y="309" width="0.7728%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="319.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.77%)</title><rect x="0.0000%" y="293" width="0.7728%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="303.50"></text></g><g><title>intel_tfa_pmu_enable_all (5 samples, 0.77%)</title><rect x="0.0000%" y="277" width="0.7728%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="287.50"></text></g><g><title>native_write_msr (5 samples, 0.77%)</title><rect x="0.0000%" y="261" width="0.7728%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="271.50"></text></g><g><title>cranelift_bforest::set::Set&lt;K&gt;::insert (1 samples, 0.15%)</title><rect x="0.7728%" y="437" width="0.1546%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="1"/><text x="1.0228%" y="447.50"></text></g><g><title>[[stack]] (2 samples, 0.31%)</title><rect x="0.7728%" y="453" width="0.3091%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="2"/><text x="1.0228%" y="463.50"></text></g><g><title>cranelift_codegen::remove_constant_phis::do_remove_constant_phis (1 samples, 0.15%)</title><rect x="0.9274%" y="437" width="0.1546%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="1"/><text x="1.1774%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.15%)</title><rect x="1.0819%" y="437" width="0.1546%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="1"/><text x="1.3319%" y="447.50"></text></g><g><title>&lt;wasmtime_cranelift::compiler::Compiler as wasmtime_environ::compilation::Compiler&gt;::compile_function (1 samples, 0.15%)</title><rect x="1.0819%" y="421" width="0.1546%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="1"/><text x="1.3319%" y="431.50"></text></g><g><title>cranelift_wasm::func_translator::FuncTranslator::translate_body (1 samples, 0.15%)</title><rect x="1.0819%" y="405" width="0.1546%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="1"/><text x="1.3319%" y="415.50"></text></g><g><title>wasmparser::binary_reader::BinaryReader::read_operator (1 samples, 0.15%)</title><rect x="1.0819%" y="389" width="0.1546%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="1"/><text x="1.3319%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;cranelift_codegen::machinst::vcode::VCode&lt;cranelift_codegen::isa::x64::inst::Inst&gt;&gt; (1 samples, 0.15%)</title><rect x="1.5456%" y="421" width="0.1546%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="1"/><text x="1.7956%" y="431.50"></text></g><g><title>_int_free (1 samples, 0.15%)</title><rect x="1.5456%" y="405" width="0.1546%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="1"/><text x="1.7956%" y="415.50"></text></g><g><title>systrim (1 samples, 0.15%)</title><rect x="1.5456%" y="389" width="0.1546%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="1"/><text x="1.7956%" y="399.50"></text></g><g><title>__GI___default_morecore (1 samples, 0.15%)</title><rect x="1.5456%" y="373" width="0.1546%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="1"/><text x="1.7956%" y="383.50"></text></g><g><title>__GI___sbrk (1 samples, 0.15%)</title><rect x="1.5456%" y="357" width="0.1546%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="1"/><text x="1.7956%" y="367.50"></text></g><g><title>__GI___sbrk (1 samples, 0.15%)</title><rect x="1.5456%" y="341" width="0.1546%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="1"/><text x="1.7956%" y="351.50"></text></g><g><title>__brk (1 samples, 0.15%)</title><rect x="1.5456%" y="325" width="0.1546%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="1"/><text x="1.7956%" y="335.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="1.5456%" y="309" width="0.1546%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="1"/><text x="1.7956%" y="319.50"></text></g><g><title>do_syscall_64 (1 samples, 0.15%)</title><rect x="1.5456%" y="293" width="0.1546%" height="15" fill="rgb(232,36,49)" fg:x="10" fg:w="1"/><text x="1.7956%" y="303.50"></text></g><g><title>__x64_sys_brk (1 samples, 0.15%)</title><rect x="1.5456%" y="277" width="0.1546%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="1"/><text x="1.7956%" y="287.50"></text></g><g><title>__do_munmap (1 samples, 0.15%)</title><rect x="1.5456%" y="261" width="0.1546%" height="15" fill="rgb(229,88,8)" fg:x="10" fg:w="1"/><text x="1.7956%" y="271.50"></text></g><g><title>unmap_region (1 samples, 0.15%)</title><rect x="1.5456%" y="245" width="0.1546%" height="15" fill="rgb(213,181,19)" fg:x="10" fg:w="1"/><text x="1.7956%" y="255.50"></text></g><g><title>unmap_vmas (1 samples, 0.15%)</title><rect x="1.5456%" y="229" width="0.1546%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="1"/><text x="1.7956%" y="239.50"></text></g><g><title>unmap_single_vma (1 samples, 0.15%)</title><rect x="1.5456%" y="213" width="0.1546%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="1"/><text x="1.7956%" y="223.50"></text></g><g><title>unmap_page_range (1 samples, 0.15%)</title><rect x="1.5456%" y="197" width="0.1546%" height="15" fill="rgb(233,36,39)" fg:x="10" fg:w="1"/><text x="1.7956%" y="207.50"></text></g><g><title>zap_pte_range.isra.0 (1 samples, 0.15%)</title><rect x="1.5456%" y="181" width="0.1546%" height="15" fill="rgb(226,3,54)" fg:x="10" fg:w="1"/><text x="1.7956%" y="191.50"></text></g><g><title>cranelift_codegen::machinst::buffer::MachBuffer&lt;I&gt;::add_uncond_branch (361 samples, 55.80%)</title><rect x="1.7002%" y="405" width="55.7960%" height="15" fill="rgb(245,192,40)" fg:x="11" fg:w="361"/><text x="1.9502%" y="415.50">cranelift_codegen::machinst::buffer::MachBuffer&lt;I&gt;::add_uncond_branch</text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (361 samples, 55.80%)</title><rect x="1.7002%" y="389" width="55.7960%" height="15" fill="rgb(238,167,29)" fg:x="11" fg:w="361"/><text x="1.9502%" y="399.50">&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;..</text></g><g><title>smallvec::SmallVec&lt;A&gt;::try_reserve (4 samples, 0.62%)</title><rect x="56.8779%" y="373" width="0.6182%" height="15" fill="rgb(232,182,51)" fg:x="368" fg:w="4"/><text x="57.1279%" y="383.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.62%)</title><rect x="56.8779%" y="357" width="0.6182%" height="15" fill="rgb(231,60,39)" fg:x="368" fg:w="4"/><text x="57.1279%" y="367.50"></text></g><g><title>_int_malloc (3 samples, 0.46%)</title><rect x="57.0325%" y="341" width="0.4637%" height="15" fill="rgb(208,69,12)" fg:x="369" fg:w="3"/><text x="57.2825%" y="351.50"></text></g><g><title>unlink_chunk (1 samples, 0.15%)</title><rect x="57.3416%" y="325" width="0.1546%" height="15" fill="rgb(235,93,37)" fg:x="371" fg:w="1"/><text x="57.5916%" y="335.50"></text></g><g><title>cranelift_codegen::isa::x64::inst::emit::emit (362 samples, 55.95%)</title><rect x="1.7002%" y="421" width="55.9505%" height="15" fill="rgb(213,116,39)" fg:x="11" fg:w="362"/><text x="1.9502%" y="431.50">cranelift_codegen::isa::x64::inst::emit::emit</text></g><g><title>cranelift_codegen::machinst::buffer::MachBuffer&lt;I&gt;::put4 (1 samples, 0.15%)</title><rect x="57.4961%" y="405" width="0.1546%" height="15" fill="rgb(222,207,29)" fg:x="372" fg:w="1"/><text x="57.7461%" y="415.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::insert_from_slice (1 samples, 0.15%)</title><rect x="57.4961%" y="389" width="0.1546%" height="15" fill="rgb(206,96,30)" fg:x="372" fg:w="1"/><text x="57.7461%" y="399.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::try_reserve (1 samples, 0.15%)</title><rect x="57.4961%" y="373" width="0.1546%" height="15" fill="rgb(218,138,4)" fg:x="372" fg:w="1"/><text x="57.7461%" y="383.50"></text></g><g><title>__GI___libc_free (1 samples, 0.15%)</title><rect x="82.2257%" y="373" width="0.1546%" height="15" fill="rgb(250,191,14)" fg:x="532" fg:w="1"/><text x="82.4757%" y="383.50"></text></g><g><title>cranelift_codegen::machinst::buffer::MachBuffer&lt;I&gt;::bind_label (164 samples, 25.35%)</title><rect x="57.6507%" y="421" width="25.3478%" height="15" fill="rgb(239,60,40)" fg:x="373" fg:w="164"/><text x="57.9007%" y="431.50">cranelift_codegen::machinst::buffer::Mac..</text></g><g><title>cranelift_codegen::machinst::buffer::MachBuffer&lt;I&gt;::truncate_last_branch (162 samples, 25.04%)</title><rect x="57.9598%" y="405" width="25.0386%" height="15" fill="rgb(206,27,48)" fg:x="375" fg:w="162"/><text x="58.2098%" y="415.50">cranelift_codegen::machinst::buffer::Mac..</text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (162 samples, 25.04%)</title><rect x="57.9598%" y="389" width="25.0386%" height="15" fill="rgb(225,35,8)" fg:x="375" fg:w="162"/><text x="58.2098%" y="399.50">&lt;smallvec::SmallVec&lt;A&gt; as core::iter::tr..</text></g><g><title>_int_free (4 samples, 0.62%)</title><rect x="82.3802%" y="373" width="0.6182%" height="15" fill="rgb(250,213,24)" fg:x="533" fg:w="4"/><text x="82.6302%" y="383.50"></text></g><g><title>cranelift_codegen::machinst::lower::visit_block_succs (1 samples, 0.15%)</title><rect x="83.1530%" y="389" width="0.1546%" height="15" fill="rgb(247,123,22)" fg:x="538" fg:w="1"/><text x="83.4030%" y="399.50"></text></g><g><title>cranelift_codegen::machinst::blockorder::BlockLoweringOrder::new::_{{closure}} (1 samples, 0.15%)</title><rect x="83.1530%" y="373" width="0.1546%" height="15" fill="rgb(231,138,38)" fg:x="538" fg:w="1"/><text x="83.4030%" y="383.50"></text></g><g><title>cranelift_entity::map::SecondaryMap&lt;K,V&gt;::resize_for_index_mut (1 samples, 0.15%)</title><rect x="83.3076%" y="389" width="0.1546%" height="15" fill="rgb(231,145,46)" fg:x="539" fg:w="1"/><text x="83.5576%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.15%)</title><rect x="83.3076%" y="373" width="0.1546%" height="15" fill="rgb(251,118,11)" fg:x="539" fg:w="1"/><text x="83.5576%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="83.3076%" y="357" width="0.1546%" height="15" fill="rgb(217,147,25)" fg:x="539" fg:w="1"/><text x="83.5576%" y="367.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.15%)</title><rect x="83.3076%" y="341" width="0.1546%" height="15" fill="rgb(247,81,37)" fg:x="539" fg:w="1"/><text x="83.5576%" y="351.50"></text></g><g><title>_int_realloc (1 samples, 0.15%)</title><rect x="83.3076%" y="325" width="0.1546%" height="15" fill="rgb(209,12,38)" fg:x="539" fg:w="1"/><text x="83.5576%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="83.3076%" y="309" width="0.1546%" height="15" fill="rgb(227,1,9)" fg:x="539" fg:w="1"/><text x="83.5576%" y="319.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.15%)</title><rect x="83.3076%" y="293" width="0.1546%" height="15" fill="rgb(248,47,43)" fg:x="539" fg:w="1"/><text x="83.5576%" y="303.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.15%)</title><rect x="83.3076%" y="277" width="0.1546%" height="15" fill="rgb(221,10,30)" fg:x="539" fg:w="1"/><text x="83.5576%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.15%)</title><rect x="83.4621%" y="389" width="0.1546%" height="15" fill="rgb(210,229,1)" fg:x="540" fg:w="1"/><text x="83.7121%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.15%)</title><rect x="83.6167%" y="389" width="0.1546%" height="15" fill="rgb(222,148,37)" fg:x="541" fg:w="1"/><text x="83.8667%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.15%)</title><rect x="83.6167%" y="373" width="0.1546%" height="15" fill="rgb(234,67,33)" fg:x="541" fg:w="1"/><text x="83.8667%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.15%)</title><rect x="83.6167%" y="357" width="0.1546%" height="15" fill="rgb(247,98,35)" fg:x="541" fg:w="1"/><text x="83.8667%" y="367.50"></text></g><g><title>page_fault (1 samples, 0.15%)</title><rect x="83.6167%" y="341" width="0.1546%" height="15" fill="rgb(247,138,52)" fg:x="541" fg:w="1"/><text x="83.8667%" y="351.50"></text></g><g><title>do_page_fault (1 samples, 0.15%)</title><rect x="83.6167%" y="325" width="0.1546%" height="15" fill="rgb(213,79,30)" fg:x="541" fg:w="1"/><text x="83.8667%" y="335.50"></text></g><g><title>__do_page_fault (1 samples, 0.15%)</title><rect x="83.6167%" y="309" width="0.1546%" height="15" fill="rgb(246,177,23)" fg:x="541" fg:w="1"/><text x="83.8667%" y="319.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.15%)</title><rect x="83.6167%" y="293" width="0.1546%" height="15" fill="rgb(230,62,27)" fg:x="541" fg:w="1"/><text x="83.8667%" y="303.50"></text></g><g><title>handle_mm_fault (1 samples, 0.15%)</title><rect x="83.6167%" y="277" width="0.1546%" height="15" fill="rgb(216,154,8)" fg:x="541" fg:w="1"/><text x="83.8667%" y="287.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.15%)</title><rect x="83.6167%" y="261" width="0.1546%" height="15" fill="rgb(244,35,45)" fg:x="541" fg:w="1"/><text x="83.8667%" y="271.50"></text></g><g><title>pmd_devmap_trans_unstable (1 samples, 0.15%)</title><rect x="83.6167%" y="245" width="0.1546%" height="15" fill="rgb(251,115,12)" fg:x="541" fg:w="1"/><text x="83.8667%" y="255.50"></text></g><g><title>page_fault (1 samples, 0.15%)</title><rect x="83.7713%" y="357" width="0.1546%" height="15" fill="rgb(240,54,50)" fg:x="542" fg:w="1"/><text x="84.0213%" y="367.50"></text></g><g><title>cranelift_codegen::machinst::blockorder::BlockLoweringOrder::new (7 samples, 1.08%)</title><rect x="82.9985%" y="405" width="1.0819%" height="15" fill="rgb(233,84,52)" fg:x="537" fg:w="7"/><text x="83.2485%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.31%)</title><rect x="83.7713%" y="389" width="0.3091%" height="15" fill="rgb(207,117,47)" fg:x="542" fg:w="2"/><text x="84.0213%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.31%)</title><rect x="83.7713%" y="373" width="0.3091%" height="15" fill="rgb(249,43,39)" fg:x="542" fg:w="2"/><text x="84.0213%" y="383.50"></text></g><g><title>sync_regs (1 samples, 0.15%)</title><rect x="83.9258%" y="357" width="0.1546%" height="15" fill="rgb(209,38,44)" fg:x="543" fg:w="1"/><text x="84.1758%" y="367.50"></text></g><g><title>cranelift_codegen::machinst::lower::Lower&lt;I&gt;::new (2 samples, 0.31%)</title><rect x="84.0804%" y="405" width="0.3091%" height="15" fill="rgb(236,212,23)" fg:x="544" fg:w="2"/><text x="84.3304%" y="415.50"></text></g><g><title>&lt;cranelift_codegen::isa::x64::X64Backend as cranelift_codegen::machinst::MachBackend&gt;::compile_function (540 samples, 83.46%)</title><rect x="1.2365%" y="437" width="83.4621%" height="15" fill="rgb(242,79,21)" fg:x="8" fg:w="540"/><text x="1.4865%" y="447.50">&lt;cranelift_codegen::isa::x64::X64Backend as cranelift_codegen::machinst::MachBackend&gt;::compile_function</text></g><g><title>cranelift_codegen::machinst::compile::compile (11 samples, 1.70%)</title><rect x="82.9985%" y="421" width="1.7002%" height="15" fill="rgb(211,96,35)" fg:x="537" fg:w="11"/><text x="83.2485%" y="431.50"></text></g><g><title>cranelift_codegen::machinst::vcode::VCode&lt;I&gt;::replace_insns_from_regalloc (2 samples, 0.31%)</title><rect x="84.3895%" y="405" width="0.3091%" height="15" fill="rgb(253,215,40)" fg:x="546" fg:w="2"/><text x="84.6395%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;cranelift_codegen::isa::x64::inst::Inst&gt; (1 samples, 0.15%)</title><rect x="84.5440%" y="389" width="0.1546%" height="15" fill="rgb(211,81,21)" fg:x="547" fg:w="1"/><text x="84.7940%" y="399.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (2 samples, 0.31%)</title><rect x="84.6986%" y="437" width="0.3091%" height="15" fill="rgb(208,190,38)" fg:x="548" fg:w="2"/><text x="84.9486%" y="447.50"></text></g><g><title>cranelift_codegen::dominator_tree::DominatorTree::compute (3 samples, 0.46%)</title><rect x="85.0077%" y="389" width="0.4637%" height="15" fill="rgb(235,213,38)" fg:x="550" fg:w="3"/><text x="85.2577%" y="399.50"></text></g><g><title>__count_memcg_events (1 samples, 0.15%)</title><rect x="85.4714%" y="245" width="0.1546%" height="15" fill="rgb(237,122,38)" fg:x="553" fg:w="1"/><text x="85.7214%" y="255.50"></text></g><g><title>cranelift_codegen::flowgraph::ControlFlowGraph::compute (2 samples, 0.31%)</title><rect x="85.4714%" y="389" width="0.3091%" height="15" fill="rgb(244,218,35)" fg:x="553" fg:w="2"/><text x="85.7214%" y="399.50"></text></g><g><title>cranelift_codegen::flowgraph::ControlFlowGraph::compute_block (2 samples, 0.31%)</title><rect x="85.4714%" y="373" width="0.3091%" height="15" fill="rgb(240,68,47)" fg:x="553" fg:w="2"/><text x="85.7214%" y="383.50"></text></g><g><title>cranelift_bforest::set::Set&lt;K&gt;::insert (2 samples, 0.31%)</title><rect x="85.4714%" y="357" width="0.3091%" height="15" fill="rgb(210,16,53)" fg:x="553" fg:w="2"/><text x="85.7214%" y="367.50"></text></g><g><title>cranelift_bforest::pool::NodePool&lt;F&gt;::alloc_node (2 samples, 0.31%)</title><rect x="85.4714%" y="341" width="0.3091%" height="15" fill="rgb(235,124,12)" fg:x="553" fg:w="2"/><text x="85.7214%" y="351.50"></text></g><g><title>page_fault (2 samples, 0.31%)</title><rect x="85.4714%" y="325" width="0.3091%" height="15" fill="rgb(224,169,11)" fg:x="553" fg:w="2"/><text x="85.7214%" y="335.50"></text></g><g><title>do_page_fault (2 samples, 0.31%)</title><rect x="85.4714%" y="309" width="0.3091%" height="15" fill="rgb(250,166,2)" fg:x="553" fg:w="2"/><text x="85.7214%" y="319.50"></text></g><g><title>__do_page_fault (2 samples, 0.31%)</title><rect x="85.4714%" y="293" width="0.3091%" height="15" fill="rgb(242,216,29)" fg:x="553" fg:w="2"/><text x="85.7214%" y="303.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.31%)</title><rect x="85.4714%" y="277" width="0.3091%" height="15" fill="rgb(230,116,27)" fg:x="553" fg:w="2"/><text x="85.7214%" y="287.50"></text></g><g><title>handle_mm_fault (2 samples, 0.31%)</title><rect x="85.4714%" y="261" width="0.3091%" height="15" fill="rgb(228,99,48)" fg:x="553" fg:w="2"/><text x="85.7214%" y="271.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.15%)</title><rect x="85.6260%" y="245" width="0.1546%" height="15" fill="rgb(253,11,6)" fg:x="554" fg:w="1"/><text x="85.8760%" y="255.50"></text></g><g><title>do_anonymous_page (1 samples, 0.15%)</title><rect x="85.6260%" y="229" width="0.1546%" height="15" fill="rgb(247,143,39)" fg:x="554" fg:w="1"/><text x="85.8760%" y="239.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.15%)</title><rect x="85.6260%" y="213" width="0.1546%" height="15" fill="rgb(236,97,10)" fg:x="554" fg:w="1"/><text x="85.8760%" y="223.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.15%)</title><rect x="85.6260%" y="197" width="0.1546%" height="15" fill="rgb(233,208,19)" fg:x="554" fg:w="1"/><text x="85.8760%" y="207.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.15%)</title><rect x="85.6260%" y="181" width="0.1546%" height="15" fill="rgb(216,164,2)" fg:x="554" fg:w="1"/><text x="85.8760%" y="191.50"></text></g><g><title>rmqueue (1 samples, 0.15%)</title><rect x="85.6260%" y="165" width="0.1546%" height="15" fill="rgb(220,129,5)" fg:x="554" fg:w="1"/><text x="85.8760%" y="175.50"></text></g><g><title>cranelift_codegen::legalizer::simple_legalize (1 samples, 0.15%)</title><rect x="85.7805%" y="389" width="0.1546%" height="15" fill="rgb(242,17,10)" fg:x="555" fg:w="1"/><text x="86.0305%" y="399.50"></text></g><g><title>cranelift_codegen::simple_gvn::do_simple_gvn (1 samples, 0.15%)</title><rect x="85.9351%" y="389" width="0.1546%" height="15" fill="rgb(242,107,0)" fg:x="556" fg:w="1"/><text x="86.1851%" y="399.50"></text></g><g><title>cranelift_codegen::context::Context::compile_and_emit (8 samples, 1.24%)</title><rect x="85.0077%" y="421" width="1.2365%" height="15" fill="rgb(251,28,31)" fg:x="550" fg:w="8"/><text x="85.2577%" y="431.50"></text></g><g><title>cranelift_codegen::context::Context::compile (8 samples, 1.24%)</title><rect x="85.0077%" y="405" width="1.2365%" height="15" fill="rgb(233,223,10)" fg:x="550" fg:w="8"/><text x="85.2577%" y="415.50"></text></g><g><title>cranelift_codegen::unreachable_code::eliminate_unreachable_code (1 samples, 0.15%)</title><rect x="86.0896%" y="389" width="0.1546%" height="15" fill="rgb(215,21,27)" fg:x="557" fg:w="1"/><text x="86.3396%" y="399.50"></text></g><g><title>cranelift_wasm::code_translator::canonicalise_then_jump (3 samples, 0.46%)</title><rect x="86.2442%" y="389" width="0.4637%" height="15" fill="rgb(232,23,21)" fg:x="558" fg:w="3"/><text x="86.4942%" y="399.50"></text></g><g><title>&lt;cranelift_frontend::frontend::FuncInstBuilder as cranelift_codegen::ir::builder::InstBuilderBase&gt;::build (2 samples, 0.31%)</title><rect x="86.3988%" y="373" width="0.3091%" height="15" fill="rgb(244,5,23)" fg:x="559" fg:w="2"/><text x="86.6488%" y="383.50"></text></g><g><title>cranelift_codegen::ir::layout::Layout::assign_inst_seq (1 samples, 0.15%)</title><rect x="86.5533%" y="357" width="0.1546%" height="15" fill="rgb(226,81,46)" fg:x="560" fg:w="1"/><text x="86.8033%" y="367.50"></text></g><g><title>&lt;wasmtime_cranelift::compiler::Compiler as wasmtime_environ::compilation::Compiler&gt;::compile_function (14 samples, 2.16%)</title><rect x="85.0077%" y="437" width="2.1638%" height="15" fill="rgb(247,70,30)" fg:x="550" fg:w="14"/><text x="85.2577%" y="447.50">&lt;..</text></g><g><title>cranelift_wasm::func_translator::FuncTranslator::translate_body (6 samples, 0.93%)</title><rect x="86.2442%" y="421" width="0.9274%" height="15" fill="rgb(212,68,19)" fg:x="558" fg:w="6"/><text x="86.4942%" y="431.50"></text></g><g><title>cranelift_wasm::code_translator::translate_operator (6 samples, 0.93%)</title><rect x="86.2442%" y="405" width="0.9274%" height="15" fill="rgb(240,187,13)" fg:x="558" fg:w="6"/><text x="86.4942%" y="415.50"></text></g><g><title>cranelift_wasm::translation_utils::block_with_params (3 samples, 0.46%)</title><rect x="86.7079%" y="389" width="0.4637%" height="15" fill="rgb(223,113,26)" fg:x="561" fg:w="3"/><text x="86.9579%" y="399.50"></text></g><g><title>cranelift_frontend::frontend::FunctionBuilder::create_block (3 samples, 0.46%)</title><rect x="86.7079%" y="373" width="0.4637%" height="15" fill="rgb(206,192,2)" fg:x="561" fg:w="3"/><text x="86.9579%" y="383.50"></text></g><g><title>cranelift_frontend::ssa::SSABuilder::declare_block (3 samples, 0.46%)</title><rect x="86.7079%" y="357" width="0.4637%" height="15" fill="rgb(241,108,4)" fg:x="561" fg:w="3"/><text x="86.9579%" y="367.50"></text></g><g><title>cranelift_entity::map::SecondaryMap&lt;K,V&gt;::resize_for_index_mut (3 samples, 0.46%)</title><rect x="86.7079%" y="341" width="0.4637%" height="15" fill="rgb(247,173,49)" fg:x="561" fg:w="3"/><text x="86.9579%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (3 samples, 0.46%)</title><rect x="86.7079%" y="325" width="0.4637%" height="15" fill="rgb(224,114,35)" fg:x="561" fg:w="3"/><text x="86.9579%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.15%)</title><rect x="87.0170%" y="309" width="0.1546%" height="15" fill="rgb(245,159,27)" fg:x="563" fg:w="1"/><text x="87.2670%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="87.0170%" y="293" width="0.1546%" height="15" fill="rgb(245,172,44)" fg:x="563" fg:w="1"/><text x="87.2670%" y="303.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.15%)</title><rect x="87.0170%" y="277" width="0.1546%" height="15" fill="rgb(236,23,11)" fg:x="563" fg:w="1"/><text x="87.2670%" y="287.50"></text></g><g><title>_int_realloc (1 samples, 0.15%)</title><rect x="87.0170%" y="261" width="0.1546%" height="15" fill="rgb(205,117,38)" fg:x="563" fg:w="1"/><text x="87.2670%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="87.0170%" y="245" width="0.1546%" height="15" fill="rgb(237,72,25)" fg:x="563" fg:w="1"/><text x="87.2670%" y="255.50"></text></g><g><title>page_fault (1 samples, 0.15%)</title><rect x="87.0170%" y="229" width="0.1546%" height="15" fill="rgb(244,70,9)" fg:x="563" fg:w="1"/><text x="87.2670%" y="239.50"></text></g><g><title>do_page_fault (1 samples, 0.15%)</title><rect x="87.0170%" y="213" width="0.1546%" height="15" fill="rgb(217,125,39)" fg:x="563" fg:w="1"/><text x="87.2670%" y="223.50"></text></g><g><title>__do_page_fault (1 samples, 0.15%)</title><rect x="87.0170%" y="197" width="0.1546%" height="15" fill="rgb(235,36,10)" fg:x="563" fg:w="1"/><text x="87.2670%" y="207.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.15%)</title><rect x="87.0170%" y="181" width="0.1546%" height="15" fill="rgb(251,123,47)" fg:x="563" fg:w="1"/><text x="87.2670%" y="191.50"></text></g><g><title>handle_mm_fault (1 samples, 0.15%)</title><rect x="87.0170%" y="165" width="0.1546%" height="15" fill="rgb(221,13,13)" fg:x="563" fg:w="1"/><text x="87.2670%" y="175.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.15%)</title><rect x="87.0170%" y="149" width="0.1546%" height="15" fill="rgb(238,131,9)" fg:x="563" fg:w="1"/><text x="87.2670%" y="159.50"></text></g><g><title>cranelift_codegen::flowgraph::ControlFlowGraph::compute (2 samples, 0.31%)</title><rect x="87.1716%" y="421" width="0.3091%" height="15" fill="rgb(211,50,8)" fg:x="564" fg:w="2"/><text x="87.4216%" y="431.50"></text></g><g><title>cranelift_codegen::flowgraph::ControlFlowGraph::compute_block (2 samples, 0.31%)</title><rect x="87.1716%" y="405" width="0.3091%" height="15" fill="rgb(245,182,24)" fg:x="564" fg:w="2"/><text x="87.4216%" y="415.50"></text></g><g><title>cranelift_bforest::set::Set&lt;K&gt;::insert (2 samples, 0.31%)</title><rect x="87.1716%" y="389" width="0.3091%" height="15" fill="rgb(242,14,37)" fg:x="564" fg:w="2"/><text x="87.4216%" y="399.50"></text></g><g><title>cranelift_bforest::pool::NodePool&lt;F&gt;::alloc_node (2 samples, 0.31%)</title><rect x="87.1716%" y="373" width="0.3091%" height="15" fill="rgb(246,228,12)" fg:x="564" fg:w="2"/><text x="87.4216%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.31%)</title><rect x="87.1716%" y="357" width="0.3091%" height="15" fill="rgb(213,55,15)" fg:x="564" fg:w="2"/><text x="87.4216%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.31%)</title><rect x="87.1716%" y="341" width="0.3091%" height="15" fill="rgb(209,9,3)" fg:x="564" fg:w="2"/><text x="87.4216%" y="351.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.31%)</title><rect x="87.1716%" y="325" width="0.3091%" height="15" fill="rgb(230,59,30)" fg:x="564" fg:w="2"/><text x="87.4216%" y="335.50"></text></g><g><title>_int_realloc (2 samples, 0.31%)</title><rect x="87.1716%" y="309" width="0.3091%" height="15" fill="rgb(209,121,21)" fg:x="564" fg:w="2"/><text x="87.4216%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.31%)</title><rect x="87.1716%" y="293" width="0.3091%" height="15" fill="rgb(220,109,13)" fg:x="564" fg:w="2"/><text x="87.4216%" y="303.50"></text></g><g><title>page_fault (2 samples, 0.31%)</title><rect x="87.1716%" y="277" width="0.3091%" height="15" fill="rgb(232,18,1)" fg:x="564" fg:w="2"/><text x="87.4216%" y="287.50"></text></g><g><title>do_page_fault (2 samples, 0.31%)</title><rect x="87.1716%" y="261" width="0.3091%" height="15" fill="rgb(215,41,42)" fg:x="564" fg:w="2"/><text x="87.4216%" y="271.50"></text></g><g><title>__do_page_fault (2 samples, 0.31%)</title><rect x="87.1716%" y="245" width="0.3091%" height="15" fill="rgb(224,123,36)" fg:x="564" fg:w="2"/><text x="87.4216%" y="255.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.31%)</title><rect x="87.1716%" y="229" width="0.3091%" height="15" fill="rgb(240,125,3)" fg:x="564" fg:w="2"/><text x="87.4216%" y="239.50"></text></g><g><title>handle_mm_fault (2 samples, 0.31%)</title><rect x="87.1716%" y="213" width="0.3091%" height="15" fill="rgb(205,98,50)" fg:x="564" fg:w="2"/><text x="87.4216%" y="223.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.31%)</title><rect x="87.1716%" y="197" width="0.3091%" height="15" fill="rgb(205,185,37)" fg:x="564" fg:w="2"/><text x="87.4216%" y="207.50"></text></g><g><title>do_anonymous_page (2 samples, 0.31%)</title><rect x="87.1716%" y="181" width="0.3091%" height="15" fill="rgb(238,207,15)" fg:x="564" fg:w="2"/><text x="87.4216%" y="191.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.15%)</title><rect x="87.3261%" y="165" width="0.1546%" height="15" fill="rgb(213,199,42)" fg:x="565" fg:w="1"/><text x="87.5761%" y="175.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.15%)</title><rect x="87.3261%" y="149" width="0.1546%" height="15" fill="rgb(235,201,11)" fg:x="565" fg:w="1"/><text x="87.5761%" y="159.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.15%)</title><rect x="87.3261%" y="133" width="0.1546%" height="15" fill="rgb(207,46,11)" fg:x="565" fg:w="1"/><text x="87.5761%" y="143.50"></text></g><g><title>kernel_poison_pages (1 samples, 0.15%)</title><rect x="87.3261%" y="117" width="0.1546%" height="15" fill="rgb(241,35,35)" fg:x="565" fg:w="1"/><text x="87.5761%" y="127.50"></text></g><g><title>cranelift_codegen::dominator_tree::DominatorTree::compute (2 samples, 0.31%)</title><rect x="87.4807%" y="405" width="0.3091%" height="15" fill="rgb(243,32,47)" fg:x="566" fg:w="2"/><text x="87.7307%" y="415.50"></text></g><g><title>cranelift_bforest::path::Path&lt;F&gt;::next (1 samples, 0.15%)</title><rect x="87.6352%" y="389" width="0.1546%" height="15" fill="rgb(247,202,23)" fg:x="567" fg:w="1"/><text x="87.8852%" y="399.50"></text></g><g><title>cranelift_codegen::context::Context::compile (6 samples, 0.93%)</title><rect x="87.1716%" y="437" width="0.9274%" height="15" fill="rgb(219,102,11)" fg:x="564" fg:w="6"/><text x="87.4216%" y="447.50"></text></g><g><title>cranelift_codegen::licm::do_licm (4 samples, 0.62%)</title><rect x="87.4807%" y="421" width="0.6182%" height="15" fill="rgb(243,110,44)" fg:x="566" fg:w="4"/><text x="87.7307%" y="431.50"></text></g><g><title>cranelift_codegen::flowgraph::ControlFlowGraph::compute (2 samples, 0.31%)</title><rect x="87.7898%" y="405" width="0.3091%" height="15" fill="rgb(222,74,54)" fg:x="568" fg:w="2"/><text x="88.0398%" y="415.50"></text></g><g><title>cranelift_codegen::flowgraph::ControlFlowGraph::compute_block (2 samples, 0.31%)</title><rect x="87.7898%" y="389" width="0.3091%" height="15" fill="rgb(216,99,12)" fg:x="568" fg:w="2"/><text x="88.0398%" y="399.50"></text></g><g><title>cranelift_bforest::set::Set&lt;K&gt;::insert (1 samples, 0.15%)</title><rect x="87.9444%" y="373" width="0.1546%" height="15" fill="rgb(226,22,26)" fg:x="569" fg:w="1"/><text x="88.1944%" y="383.50"></text></g><g><title>cranelift_bforest::pool::NodePool&lt;F&gt;::alloc_node (1 samples, 0.15%)</title><rect x="87.9444%" y="357" width="0.1546%" height="15" fill="rgb(217,163,10)" fg:x="569" fg:w="1"/><text x="88.1944%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.31%)</title><rect x="88.8717%" y="405" width="0.3091%" height="15" fill="rgb(213,25,53)" fg:x="575" fg:w="2"/><text x="89.1217%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.31%)</title><rect x="88.8717%" y="389" width="0.3091%" height="15" fill="rgb(252,105,26)" fg:x="575" fg:w="2"/><text x="89.1217%" y="399.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.31%)</title><rect x="88.8717%" y="373" width="0.3091%" height="15" fill="rgb(220,39,43)" fg:x="575" fg:w="2"/><text x="89.1217%" y="383.50"></text></g><g><title>_int_realloc (2 samples, 0.31%)</title><rect x="88.8717%" y="357" width="0.3091%" height="15" fill="rgb(229,68,48)" fg:x="575" fg:w="2"/><text x="89.1217%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.31%)</title><rect x="88.8717%" y="341" width="0.3091%" height="15" fill="rgb(252,8,32)" fg:x="575" fg:w="2"/><text x="89.1217%" y="351.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.15%)</title><rect x="89.0263%" y="325" width="0.1546%" height="15" fill="rgb(223,20,43)" fg:x="576" fg:w="1"/><text x="89.2763%" y="335.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.15%)</title><rect x="89.0263%" y="309" width="0.1546%" height="15" fill="rgb(229,81,49)" fg:x="576" fg:w="1"/><text x="89.2763%" y="319.50"></text></g><g><title>cranelift_codegen::machinst::lower::Lower&lt;I&gt;::lower (8 samples, 1.24%)</title><rect x="88.0989%" y="421" width="1.2365%" height="15" fill="rgb(236,28,36)" fg:x="570" fg:w="8"/><text x="88.3489%" y="431.50"></text></g><g><title>page_fault (1 samples, 0.15%)</title><rect x="89.1808%" y="405" width="0.1546%" height="15" fill="rgb(249,185,26)" fg:x="577" fg:w="1"/><text x="89.4308%" y="415.50"></text></g><g><title>do_page_fault (1 samples, 0.15%)</title><rect x="89.1808%" y="389" width="0.1546%" height="15" fill="rgb(249,174,33)" fg:x="577" fg:w="1"/><text x="89.4308%" y="399.50"></text></g><g><title>__do_page_fault (1 samples, 0.15%)</title><rect x="89.1808%" y="373" width="0.1546%" height="15" fill="rgb(233,201,37)" fg:x="577" fg:w="1"/><text x="89.4308%" y="383.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.15%)</title><rect x="89.1808%" y="357" width="0.1546%" height="15" fill="rgb(221,78,26)" fg:x="577" fg:w="1"/><text x="89.4308%" y="367.50"></text></g><g><title>handle_mm_fault (1 samples, 0.15%)</title><rect x="89.1808%" y="341" width="0.1546%" height="15" fill="rgb(250,127,30)" fg:x="577" fg:w="1"/><text x="89.4308%" y="351.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.15%)</title><rect x="89.1808%" y="325" width="0.1546%" height="15" fill="rgb(230,49,44)" fg:x="577" fg:w="1"/><text x="89.4308%" y="335.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.15%)</title><rect x="89.1808%" y="309" width="0.1546%" height="15" fill="rgb(229,67,23)" fg:x="577" fg:w="1"/><text x="89.4308%" y="319.50"></text></g><g><title>regalloc::analysis_control_flow::calc_loop_depths (1 samples, 0.15%)</title><rect x="89.4900%" y="357" width="0.1546%" height="15" fill="rgb(249,83,47)" fg:x="579" fg:w="1"/><text x="89.7400%" y="367.50"></text></g><g><title>regalloc::analysis_control_flow::calc_dom_tree (1 samples, 0.15%)</title><rect x="89.4900%" y="341" width="0.1546%" height="15" fill="rgb(215,43,3)" fg:x="579" fg:w="1"/><text x="89.7400%" y="351.50"></text></g><g><title>regalloc::analysis_control_flow::CFGInfo::create (2 samples, 0.31%)</title><rect x="89.4900%" y="373" width="0.3091%" height="15" fill="rgb(238,154,13)" fg:x="579" fg:w="2"/><text x="89.7400%" y="383.50"></text></g><g><title>regalloc::analysis_control_flow::calc_preds_and_succs (1 samples, 0.15%)</title><rect x="89.6445%" y="357" width="0.1546%" height="15" fill="rgb(219,56,2)" fg:x="580" fg:w="1"/><text x="89.8945%" y="367.50"></text></g><g><title>__do_page_fault (1 samples, 0.15%)</title><rect x="89.9536%" y="261" width="0.1546%" height="15" fill="rgb(233,0,4)" fg:x="582" fg:w="1"/><text x="90.2036%" y="271.50"></text></g><g><title>regalloc::analysis_data_flow::calc_def_and_use (3 samples, 0.46%)</title><rect x="89.7991%" y="373" width="0.4637%" height="15" fill="rgb(235,30,7)" fg:x="581" fg:w="3"/><text x="90.0491%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.31%)</title><rect x="89.9536%" y="357" width="0.3091%" height="15" fill="rgb(250,79,13)" fg:x="582" fg:w="2"/><text x="90.2036%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.31%)</title><rect x="89.9536%" y="341" width="0.3091%" height="15" fill="rgb(211,146,34)" fg:x="582" fg:w="2"/><text x="90.2036%" y="351.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.31%)</title><rect x="89.9536%" y="325" width="0.3091%" height="15" fill="rgb(228,22,38)" fg:x="582" fg:w="2"/><text x="90.2036%" y="335.50"></text></g><g><title>_int_realloc (2 samples, 0.31%)</title><rect x="89.9536%" y="309" width="0.3091%" height="15" fill="rgb(235,168,5)" fg:x="582" fg:w="2"/><text x="90.2036%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.31%)</title><rect x="89.9536%" y="293" width="0.3091%" height="15" fill="rgb(221,155,16)" fg:x="582" fg:w="2"/><text x="90.2036%" y="303.50"></text></g><g><title>page_fault (2 samples, 0.31%)</title><rect x="89.9536%" y="277" width="0.3091%" height="15" fill="rgb(215,215,53)" fg:x="582" fg:w="2"/><text x="90.2036%" y="287.50"></text></g><g><title>do_page_fault (1 samples, 0.15%)</title><rect x="90.1082%" y="261" width="0.1546%" height="15" fill="rgb(223,4,10)" fg:x="583" fg:w="1"/><text x="90.3582%" y="271.50"></text></g><g><title>__do_page_fault (1 samples, 0.15%)</title><rect x="90.1082%" y="245" width="0.1546%" height="15" fill="rgb(234,103,6)" fg:x="583" fg:w="1"/><text x="90.3582%" y="255.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.15%)</title><rect x="90.1082%" y="229" width="0.1546%" height="15" fill="rgb(227,97,0)" fg:x="583" fg:w="1"/><text x="90.3582%" y="239.50"></text></g><g><title>handle_mm_fault (1 samples, 0.15%)</title><rect x="90.1082%" y="213" width="0.1546%" height="15" fill="rgb(234,150,53)" fg:x="583" fg:w="1"/><text x="90.3582%" y="223.50"></text></g><g><title>regalloc::analysis_data_flow::calc_livein_and_liveout (2 samples, 0.31%)</title><rect x="90.2628%" y="373" width="0.3091%" height="15" fill="rgb(228,201,54)" fg:x="584" fg:w="2"/><text x="90.5128%" y="383.50"></text></g><g><title>regalloc::sparse_set::SparseSetU&lt;A&gt;::union (1 samples, 0.15%)</title><rect x="90.4173%" y="357" width="0.1546%" height="15" fill="rgb(222,22,37)" fg:x="585" fg:w="1"/><text x="90.6673%" y="367.50"></text></g><g><title>regalloc::analysis_data_flow::get_range_frags (1 samples, 0.15%)</title><rect x="90.5719%" y="373" width="0.1546%" height="15" fill="rgb(237,53,32)" fg:x="586" fg:w="1"/><text x="90.8219%" y="383.50"></text></g><g><title>regalloc::analysis_data_flow::get_range_frags_for_block (1 samples, 0.15%)</title><rect x="90.5719%" y="357" width="0.1546%" height="15" fill="rgb(233,25,53)" fg:x="586" fg:w="1"/><text x="90.8219%" y="367.50"></text></g><g><title>regalloc::analysis_main::run_analysis (10 samples, 1.55%)</title><rect x="89.3354%" y="389" width="1.5456%" height="15" fill="rgb(210,40,34)" fg:x="578" fg:w="10"/><text x="89.5854%" y="399.50"></text></g><g><title>regalloc::analysis_data_flow::get_sanitized_reg_uses_for_func (1 samples, 0.15%)</title><rect x="90.7264%" y="373" width="0.1546%" height="15" fill="rgb(241,220,44)" fg:x="587" fg:w="1"/><text x="90.9764%" y="383.50"></text></g><g><title>regalloc::analysis_data_flow::add_san_reg_vecs_for_insn (1 samples, 0.15%)</title><rect x="90.7264%" y="357" width="0.1546%" height="15" fill="rgb(235,28,35)" fg:x="587" fg:w="1"/><text x="90.9764%" y="367.50"></text></g><g><title>regalloc::inst_stream::add_spills_reloads_and_moves (1 samples, 0.15%)</title><rect x="90.8810%" y="373" width="0.1546%" height="15" fill="rgb(210,56,17)" fg:x="588" fg:w="1"/><text x="91.1310%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.15%)</title><rect x="90.8810%" y="357" width="0.1546%" height="15" fill="rgb(224,130,29)" fg:x="588" fg:w="1"/><text x="91.1310%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="90.8810%" y="341" width="0.1546%" height="15" fill="rgb(235,212,8)" fg:x="588" fg:w="1"/><text x="91.1310%" y="351.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.15%)</title><rect x="90.8810%" y="325" width="0.1546%" height="15" fill="rgb(223,33,50)" fg:x="588" fg:w="1"/><text x="91.1310%" y="335.50"></text></g><g><title>_int_realloc (1 samples, 0.15%)</title><rect x="90.8810%" y="309" width="0.1546%" height="15" fill="rgb(219,149,13)" fg:x="588" fg:w="1"/><text x="91.1310%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="90.8810%" y="293" width="0.1546%" height="15" fill="rgb(250,156,29)" fg:x="588" fg:w="1"/><text x="91.1310%" y="303.50"></text></g><g><title>cranelift_codegen::machinst::compile::compile (20 samples, 3.09%)</title><rect x="88.0989%" y="437" width="3.0912%" height="15" fill="rgb(216,193,19)" fg:x="570" fg:w="20"/><text x="88.3489%" y="447.50">cra..</text></g><g><title>regalloc::allocate_registers_with_opts (12 samples, 1.85%)</title><rect x="89.3354%" y="421" width="1.8547%" height="15" fill="rgb(216,135,14)" fg:x="578" fg:w="12"/><text x="89.5854%" y="431.50">r..</text></g><g><title>regalloc::bt_main::alloc_main (12 samples, 1.85%)</title><rect x="89.3354%" y="405" width="1.8547%" height="15" fill="rgb(241,47,5)" fg:x="578" fg:w="12"/><text x="89.5854%" y="415.50">r..</text></g><g><title>regalloc::inst_stream::edit_inst_stream (2 samples, 0.31%)</title><rect x="90.8810%" y="389" width="0.3091%" height="15" fill="rgb(233,42,35)" fg:x="588" fg:w="2"/><text x="91.1310%" y="399.50"></text></g><g><title>regalloc::inst_stream::map_vregs_to_rregs (1 samples, 0.15%)</title><rect x="91.0355%" y="373" width="0.1546%" height="15" fill="rgb(231,13,6)" fg:x="589" fg:w="1"/><text x="91.2855%" y="383.50"></text></g><g><title>regalloc::bt_main::alloc_main (1 samples, 0.15%)</title><rect x="91.1901%" y="437" width="0.1546%" height="15" fill="rgb(207,181,40)" fg:x="590" fg:w="1"/><text x="91.4401%" y="447.50"></text></g><g><title>regalloc::analysis_main::run_analysis (1 samples, 0.15%)</title><rect x="91.1901%" y="421" width="0.1546%" height="15" fill="rgb(254,173,49)" fg:x="590" fg:w="1"/><text x="91.4401%" y="431.50"></text></g><g><title>regalloc::analysis_control_flow::CFGInfo::create (1 samples, 0.15%)</title><rect x="91.1901%" y="405" width="0.1546%" height="15" fill="rgb(221,1,38)" fg:x="590" fg:w="1"/><text x="91.4401%" y="415.50"></text></g><g><title>regalloc::analysis_control_flow::calc_preord_and_postord (1 samples, 0.15%)</title><rect x="91.1901%" y="389" width="0.1546%" height="15" fill="rgb(206,124,46)" fg:x="590" fg:w="1"/><text x="91.4401%" y="399.50"></text></g><g><title>regalloc::sparse_set::SparseSetU&lt;A&gt;::equals (1 samples, 0.15%)</title><rect x="91.3447%" y="437" width="0.1546%" height="15" fill="rgb(249,21,11)" fg:x="591" fg:w="1"/><text x="91.5947%" y="447.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::try_reserve (1 samples, 0.15%)</title><rect x="91.4992%" y="437" width="0.1546%" height="15" fill="rgb(222,201,40)" fg:x="592" fg:w="1"/><text x="91.7492%" y="447.50"></text></g><g><title>_int_free (1 samples, 0.15%)</title><rect x="91.6538%" y="389" width="0.1546%" height="15" fill="rgb(235,61,29)" fg:x="593" fg:w="1"/><text x="91.9038%" y="399.50"></text></g><g><title>systrim (1 samples, 0.15%)</title><rect x="91.6538%" y="373" width="0.1546%" height="15" fill="rgb(219,207,3)" fg:x="593" fg:w="1"/><text x="91.9038%" y="383.50"></text></g><g><title>__GI___default_morecore (1 samples, 0.15%)</title><rect x="91.6538%" y="357" width="0.1546%" height="15" fill="rgb(222,56,46)" fg:x="593" fg:w="1"/><text x="91.9038%" y="367.50"></text></g><g><title>__GI___sbrk (1 samples, 0.15%)</title><rect x="91.6538%" y="341" width="0.1546%" height="15" fill="rgb(239,76,54)" fg:x="593" fg:w="1"/><text x="91.9038%" y="351.50"></text></g><g><title>__GI___sbrk (1 samples, 0.15%)</title><rect x="91.6538%" y="325" width="0.1546%" height="15" fill="rgb(231,124,27)" fg:x="593" fg:w="1"/><text x="91.9038%" y="335.50"></text></g><g><title>__brk (1 samples, 0.15%)</title><rect x="91.6538%" y="309" width="0.1546%" height="15" fill="rgb(249,195,6)" fg:x="593" fg:w="1"/><text x="91.9038%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="91.6538%" y="293" width="0.1546%" height="15" fill="rgb(237,174,47)" fg:x="593" fg:w="1"/><text x="91.9038%" y="303.50"></text></g><g><title>do_syscall_64 (1 samples, 0.15%)</title><rect x="91.6538%" y="277" width="0.1546%" height="15" fill="rgb(206,201,31)" fg:x="593" fg:w="1"/><text x="91.9038%" y="287.50"></text></g><g><title>__x64_sys_brk (1 samples, 0.15%)</title><rect x="91.6538%" y="261" width="0.1546%" height="15" fill="rgb(231,57,52)" fg:x="593" fg:w="1"/><text x="91.9038%" y="271.50"></text></g><g><title>__do_munmap (1 samples, 0.15%)</title><rect x="91.6538%" y="245" width="0.1546%" height="15" fill="rgb(248,177,22)" fg:x="593" fg:w="1"/><text x="91.9038%" y="255.50"></text></g><g><title>unmap_region (1 samples, 0.15%)</title><rect x="91.6538%" y="229" width="0.1546%" height="15" fill="rgb(215,211,37)" fg:x="593" fg:w="1"/><text x="91.9038%" y="239.50"></text></g><g><title>unmap_vmas (1 samples, 0.15%)</title><rect x="91.6538%" y="213" width="0.1546%" height="15" fill="rgb(241,128,51)" fg:x="593" fg:w="1"/><text x="91.9038%" y="223.50"></text></g><g><title>unmap_single_vma (1 samples, 0.15%)</title><rect x="91.6538%" y="197" width="0.1546%" height="15" fill="rgb(227,165,31)" fg:x="593" fg:w="1"/><text x="91.9038%" y="207.50"></text></g><g><title>unmap_page_range (1 samples, 0.15%)</title><rect x="91.6538%" y="181" width="0.1546%" height="15" fill="rgb(228,167,24)" fg:x="593" fg:w="1"/><text x="91.9038%" y="191.50"></text></g><g><title>zap_pte_range.isra.0 (1 samples, 0.15%)</title><rect x="91.6538%" y="165" width="0.1546%" height="15" fill="rgb(228,143,12)" fg:x="593" fg:w="1"/><text x="91.9038%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;wast::ast::module::ModuleField&gt; (1 samples, 0.15%)</title><rect x="91.8083%" y="357" width="0.1546%" height="15" fill="rgb(249,149,8)" fg:x="594" fg:w="1"/><text x="92.0583%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;wast::ast::types::TypeUse&lt;wast::ast::types::FunctionType&gt;&gt; (1 samples, 0.15%)</title><rect x="91.8083%" y="341" width="0.1546%" height="15" fill="rgb(243,35,44)" fg:x="594" fg:w="1"/><text x="92.0583%" y="351.50"></text></g><g><title>wast::ast::module::Module::encode (1 samples, 0.15%)</title><rect x="91.9629%" y="357" width="0.1546%" height="15" fill="rgb(246,89,9)" fg:x="595" fg:w="1"/><text x="92.2129%" y="367.50"></text></g><g><title>wast::resolve::resolve (1 samples, 0.15%)</title><rect x="91.9629%" y="341" width="0.1546%" height="15" fill="rgb(233,213,13)" fg:x="595" fg:w="1"/><text x="92.2129%" y="351.50"></text></g><g><title>wast::resolve::aliases::run (1 samples, 0.15%)</title><rect x="91.9629%" y="325" width="0.1546%" height="15" fill="rgb(233,141,41)" fg:x="595" fg:w="1"/><text x="92.2129%" y="335.50"></text></g><g><title>wast::resolve::aliases::Expander::expand_expr (1 samples, 0.15%)</title><rect x="91.9629%" y="309" width="0.1546%" height="15" fill="rgb(239,167,4)" fg:x="595" fg:w="1"/><text x="92.2129%" y="319.50"></text></g><g><title>wast::ast::expr::Instruction::memarg_mut (1 samples, 0.15%)</title><rect x="91.9629%" y="293" width="0.1546%" height="15" fill="rgb(209,217,16)" fg:x="595" fg:w="1"/><text x="92.2129%" y="303.50"></text></g><g><title>wast::parser::ParseBuffer::new (1 samples, 0.15%)</title><rect x="92.1175%" y="357" width="0.1546%" height="15" fill="rgb(219,88,35)" fg:x="596" fg:w="1"/><text x="92.3675%" y="367.50"></text></g><g><title>wast::lexer::Lexer::parse (1 samples, 0.15%)</title><rect x="92.1175%" y="341" width="0.1546%" height="15" fill="rgb(220,193,23)" fg:x="596" fg:w="1"/><text x="92.3675%" y="351.50"></text></g><g><title>&lt;wast::ast::expr::Instruction as wast::parser::Parse&gt;::parse::Loop (1 samples, 0.15%)</title><rect x="92.2720%" y="213" width="0.1546%" height="15" fill="rgb(230,90,52)" fg:x="597" fg:w="1"/><text x="92.5220%" y="223.50"></text></g><g><title>&lt;wast::ast::expr::BlockType as wast::parser::Parse&gt;::parse (1 samples, 0.15%)</title><rect x="92.2720%" y="197" width="0.1546%" height="15" fill="rgb(252,106,19)" fg:x="597" fg:w="1"/><text x="92.5220%" y="207.50"></text></g><g><title>&lt;wast::ast::types::TypeUse&lt;T&gt; as wast::parser::Parse&gt;::parse (1 samples, 0.15%)</title><rect x="92.2720%" y="181" width="0.1546%" height="15" fill="rgb(206,74,20)" fg:x="597" fg:w="1"/><text x="92.5220%" y="191.50"></text></g><g><title>[unknown] (592 samples, 91.50%)</title><rect x="1.0819%" y="453" width="91.4992%" height="15" fill="rgb(230,138,44)" fg:x="7" fg:w="592"/><text x="1.3319%" y="463.50">[unknown]</text></g><g><title>wasmtime::main (6 samples, 0.93%)</title><rect x="91.6538%" y="437" width="0.9274%" height="15" fill="rgb(235,182,43)" fg:x="593" fg:w="6"/><text x="91.9038%" y="447.50"></text></g><g><title>wasmtime_cli::commands::compile::CompileCommand::execute (6 samples, 0.93%)</title><rect x="91.6538%" y="421" width="0.9274%" height="15" fill="rgb(242,16,51)" fg:x="593" fg:w="6"/><text x="91.9038%" y="431.50"></text></g><g><title>wasmtime::engine::Engine::precompile_module (6 samples, 0.93%)</title><rect x="91.6538%" y="405" width="0.9274%" height="15" fill="rgb(248,9,4)" fg:x="593" fg:w="6"/><text x="91.9038%" y="415.50"></text></g><g><title>wat::parse_bytes (5 samples, 0.77%)</title><rect x="91.8083%" y="389" width="0.7728%" height="15" fill="rgb(210,31,22)" fg:x="594" fg:w="5"/><text x="92.0583%" y="399.50"></text></g><g><title>wat::_parse_str (5 samples, 0.77%)</title><rect x="91.8083%" y="373" width="0.7728%" height="15" fill="rgb(239,54,39)" fg:x="594" fg:w="5"/><text x="92.0583%" y="383.50"></text></g><g><title>wast::parser::parse (2 samples, 0.31%)</title><rect x="92.2720%" y="357" width="0.3091%" height="15" fill="rgb(230,99,41)" fg:x="597" fg:w="2"/><text x="92.5220%" y="367.50"></text></g><g><title>&lt;wast::ast::module::Wat as wast::parser::Parse&gt;::parse (2 samples, 0.31%)</title><rect x="92.2720%" y="341" width="0.3091%" height="15" fill="rgb(253,106,12)" fg:x="597" fg:w="2"/><text x="92.5220%" y="351.50"></text></g><g><title>wast::parser::Parser::parens (2 samples, 0.31%)</title><rect x="92.2720%" y="325" width="0.3091%" height="15" fill="rgb(213,46,41)" fg:x="597" fg:w="2"/><text x="92.5220%" y="335.50"></text></g><g><title>&lt;wast::ast::module::Module as wast::parser::Parse&gt;::parse (2 samples, 0.31%)</title><rect x="92.2720%" y="309" width="0.3091%" height="15" fill="rgb(215,133,35)" fg:x="597" fg:w="2"/><text x="92.5220%" y="319.50"></text></g><g><title>wast::ast::module::ModuleField::parse_remaining (2 samples, 0.31%)</title><rect x="92.2720%" y="293" width="0.3091%" height="15" fill="rgb(213,28,5)" fg:x="597" fg:w="2"/><text x="92.5220%" y="303.50"></text></g><g><title>wast::parser::Parser::parens (2 samples, 0.31%)</title><rect x="92.2720%" y="277" width="0.3091%" height="15" fill="rgb(215,77,49)" fg:x="597" fg:w="2"/><text x="92.5220%" y="287.50"></text></g><g><title>&lt;wast::ast::module::ModuleField as wast::parser::Parse&gt;::parse (2 samples, 0.31%)</title><rect x="92.2720%" y="261" width="0.3091%" height="15" fill="rgb(248,100,22)" fg:x="597" fg:w="2"/><text x="92.5220%" y="271.50"></text></g><g><title>&lt;wast::ast::func::Func as wast::parser::Parse&gt;::parse (2 samples, 0.31%)</title><rect x="92.2720%" y="245" width="0.3091%" height="15" fill="rgb(208,67,9)" fg:x="597" fg:w="2"/><text x="92.5220%" y="255.50"></text></g><g><title>&lt;wast::ast::expr::Expression as wast::parser::Parse&gt;::parse (2 samples, 0.31%)</title><rect x="92.2720%" y="229" width="0.3091%" height="15" fill="rgb(219,133,21)" fg:x="597" fg:w="2"/><text x="92.5220%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="92.4266%" y="213" width="0.1546%" height="15" fill="rgb(246,46,29)" fg:x="598" fg:w="1"/><text x="92.6766%" y="223.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.15%)</title><rect x="92.4266%" y="197" width="0.1546%" height="15" fill="rgb(246,185,52)" fg:x="598" fg:w="1"/><text x="92.6766%" y="207.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.15%)</title><rect x="92.4266%" y="181" width="0.1546%" height="15" fill="rgb(252,136,11)" fg:x="598" fg:w="1"/><text x="92.6766%" y="191.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (1 samples, 0.15%)</title><rect x="92.5811%" y="437" width="0.1546%" height="15" fill="rgb(219,138,53)" fg:x="599" fg:w="1"/><text x="92.8311%" y="447.50"></text></g><g><title>[wasmtime] (2 samples, 0.31%)</title><rect x="92.5811%" y="453" width="0.3091%" height="15" fill="rgb(211,51,23)" fg:x="599" fg:w="2"/><text x="92.8311%" y="463.50"></text></g><g><title>cranelift_codegen::dominator_tree::DominatorTree::compute (1 samples, 0.15%)</title><rect x="92.7357%" y="437" width="0.1546%" height="15" fill="rgb(247,221,28)" fg:x="600" fg:w="1"/><text x="92.9857%" y="447.50"></text></g><g><title>intel_tfa_pmu_enable_all (1 samples, 0.15%)</title><rect x="93.0448%" y="357" width="0.1546%" height="15" fill="rgb(251,222,45)" fg:x="602" fg:w="1"/><text x="93.2948%" y="367.50"></text></g><g><title>ret_from_fork (20 samples, 3.09%)</title><rect x="93.0448%" y="437" width="3.0912%" height="15" fill="rgb(217,162,53)" fg:x="602" fg:w="20"/><text x="93.2948%" y="447.50">ret..</text></g><g><title>schedule_tail (20 samples, 3.09%)</title><rect x="93.0448%" y="421" width="3.0912%" height="15" fill="rgb(229,93,14)" fg:x="602" fg:w="20"/><text x="93.2948%" y="431.50">sch..</text></g><g><title>finish_task_switch (20 samples, 3.09%)</title><rect x="93.0448%" y="405" width="3.0912%" height="15" fill="rgb(209,67,49)" fg:x="602" fg:w="20"/><text x="93.2948%" y="415.50">fin..</text></g><g><title>__perf_event_task_sched_in (20 samples, 3.09%)</title><rect x="93.0448%" y="389" width="3.0912%" height="15" fill="rgb(213,87,29)" fg:x="602" fg:w="20"/><text x="93.2948%" y="399.50">__p..</text></g><g><title>perf_pmu_enable.part.0 (20 samples, 3.09%)</title><rect x="93.0448%" y="373" width="3.0912%" height="15" fill="rgb(205,151,52)" fg:x="602" fg:w="20"/><text x="93.2948%" y="383.50">per..</text></g><g><title>x86_pmu_enable (19 samples, 2.94%)</title><rect x="93.1994%" y="357" width="2.9366%" height="15" fill="rgb(253,215,39)" fg:x="603" fg:w="19"/><text x="93.4494%" y="367.50">x8..</text></g><g><title>intel_tfa_pmu_enable_all (18 samples, 2.78%)</title><rect x="93.3539%" y="341" width="2.7821%" height="15" fill="rgb(221,220,41)" fg:x="604" fg:w="18"/><text x="93.6039%" y="351.50">in..</text></g><g><title>native_write_msr (18 samples, 2.78%)</title><rect x="93.3539%" y="325" width="2.7821%" height="15" fill="rgb(218,133,21)" fg:x="604" fg:w="18"/><text x="93.6039%" y="335.50">na..</text></g><g><title>std::sys::unix::thread::guard::current (2 samples, 0.31%)</title><rect x="96.1360%" y="357" width="0.3091%" height="15" fill="rgb(221,193,43)" fg:x="622" fg:w="2"/><text x="96.3860%" y="367.50"></text></g><g><title>pthread_getattr_np (2 samples, 0.31%)</title><rect x="96.1360%" y="341" width="0.3091%" height="15" fill="rgb(240,128,52)" fg:x="622" fg:w="2"/><text x="96.3860%" y="351.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.31%)</title><rect x="96.1360%" y="325" width="0.3091%" height="15" fill="rgb(253,114,12)" fg:x="622" fg:w="2"/><text x="96.3860%" y="335.50"></text></g><g><title>tcache_init (2 samples, 0.31%)</title><rect x="96.1360%" y="309" width="0.3091%" height="15" fill="rgb(215,223,47)" fg:x="622" fg:w="2"/><text x="96.3860%" y="319.50"></text></g><g><title>tcache_init (2 samples, 0.31%)</title><rect x="96.1360%" y="293" width="0.3091%" height="15" fill="rgb(248,225,23)" fg:x="622" fg:w="2"/><text x="96.3860%" y="303.50"></text></g><g><title>arena_get2 (2 samples, 0.31%)</title><rect x="96.1360%" y="277" width="0.3091%" height="15" fill="rgb(250,108,0)" fg:x="622" fg:w="2"/><text x="96.3860%" y="287.50"></text></g><g><title>arena_get2 (2 samples, 0.31%)</title><rect x="96.1360%" y="261" width="0.3091%" height="15" fill="rgb(228,208,7)" fg:x="622" fg:w="2"/><text x="96.3860%" y="271.50"></text></g><g><title>_int_new_arena (2 samples, 0.31%)</title><rect x="96.1360%" y="245" width="0.3091%" height="15" fill="rgb(244,45,10)" fg:x="622" fg:w="2"/><text x="96.3860%" y="255.50"></text></g><g><title>new_heap (2 samples, 0.31%)</title><rect x="96.1360%" y="229" width="0.3091%" height="15" fill="rgb(207,125,25)" fg:x="622" fg:w="2"/><text x="96.3860%" y="239.50"></text></g><g><title>__GI___mmap64 (2 samples, 0.31%)</title><rect x="96.1360%" y="213" width="0.3091%" height="15" fill="rgb(210,195,18)" fg:x="622" fg:w="2"/><text x="96.3860%" y="223.50"></text></g><g><title>__GI___mmap64 (2 samples, 0.31%)</title><rect x="96.1360%" y="197" width="0.3091%" height="15" fill="rgb(249,80,12)" fg:x="622" fg:w="2"/><text x="96.3860%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.31%)</title><rect x="96.1360%" y="181" width="0.3091%" height="15" fill="rgb(221,65,9)" fg:x="622" fg:w="2"/><text x="96.3860%" y="191.50"></text></g><g><title>do_syscall_64 (2 samples, 0.31%)</title><rect x="96.1360%" y="165" width="0.3091%" height="15" fill="rgb(235,49,36)" fg:x="622" fg:w="2"/><text x="96.3860%" y="175.50"></text></g><g><title>__x64_sys_mmap (2 samples, 0.31%)</title><rect x="96.1360%" y="149" width="0.3091%" height="15" fill="rgb(225,32,20)" fg:x="622" fg:w="2"/><text x="96.3860%" y="159.50"></text></g><g><title>ksys_mmap_pgoff (2 samples, 0.31%)</title><rect x="96.1360%" y="133" width="0.3091%" height="15" fill="rgb(215,141,46)" fg:x="622" fg:w="2"/><text x="96.3860%" y="143.50"></text></g><g><title>vm_mmap_pgoff (2 samples, 0.31%)</title><rect x="96.1360%" y="117" width="0.3091%" height="15" fill="rgb(250,160,47)" fg:x="622" fg:w="2"/><text x="96.3860%" y="127.50"></text></g><g><title>do_mmap (1 samples, 0.15%)</title><rect x="96.2906%" y="101" width="0.1546%" height="15" fill="rgb(216,222,40)" fg:x="623" fg:w="1"/><text x="96.5406%" y="111.50"></text></g><g><title>get_unmapped_area (1 samples, 0.15%)</title><rect x="96.2906%" y="85" width="0.1546%" height="15" fill="rgb(234,217,39)" fg:x="623" fg:w="1"/><text x="96.5406%" y="95.50"></text></g><g><title>arch_get_unmapped_area_topdown (1 samples, 0.15%)</title><rect x="96.2906%" y="69" width="0.1546%" height="15" fill="rgb(207,178,40)" fg:x="623" fg:w="1"/><text x="96.5406%" y="79.50"></text></g><g><title>unmapped_area_topdown (1 samples, 0.15%)</title><rect x="96.2906%" y="53" width="0.1546%" height="15" fill="rgb(221,136,13)" fg:x="623" fg:w="1"/><text x="96.5406%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.15%)</title><rect x="96.4451%" y="309" width="0.1546%" height="15" fill="rgb(249,199,10)" fg:x="624" fg:w="1"/><text x="96.6951%" y="319.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.15%)</title><rect x="96.4451%" y="293" width="0.1546%" height="15" fill="rgb(249,222,13)" fg:x="624" fg:w="1"/><text x="96.6951%" y="303.50"></text></g><g><title>__GI___sched_yield (1 samples, 0.15%)</title><rect x="96.5997%" y="309" width="0.1546%" height="15" fill="rgb(244,185,38)" fg:x="625" fg:w="1"/><text x="96.8497%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="96.5997%" y="293" width="0.1546%" height="15" fill="rgb(236,202,9)" fg:x="625" fg:w="1"/><text x="96.8497%" y="303.50"></text></g><g><title>do_syscall_64 (1 samples, 0.15%)</title><rect x="96.5997%" y="277" width="0.1546%" height="15" fill="rgb(250,229,37)" fg:x="625" fg:w="1"/><text x="96.8497%" y="287.50"></text></g><g><title>__x64_sys_sched_yield (1 samples, 0.15%)</title><rect x="96.5997%" y="261" width="0.1546%" height="15" fill="rgb(206,174,23)" fg:x="625" fg:w="1"/><text x="96.8497%" y="271.50"></text></g><g><title>do_sched_yield (1 samples, 0.15%)</title><rect x="96.5997%" y="245" width="0.1546%" height="15" fill="rgb(211,33,43)" fg:x="625" fg:w="1"/><text x="96.8497%" y="255.50"></text></g><g><title>yield_task_fair (1 samples, 0.15%)</title><rect x="96.5997%" y="229" width="0.1546%" height="15" fill="rgb(245,58,50)" fg:x="625" fg:w="1"/><text x="96.8497%" y="239.50"></text></g><g><title>__x64_sys_futex (10 samples, 1.55%)</title><rect x="96.7543%" y="213" width="1.5456%" height="15" fill="rgb(244,68,36)" fg:x="626" fg:w="10"/><text x="97.0043%" y="223.50"></text></g><g><title>do_futex (10 samples, 1.55%)</title><rect x="96.7543%" y="197" width="1.5456%" height="15" fill="rgb(232,229,15)" fg:x="626" fg:w="10"/><text x="97.0043%" y="207.50"></text></g><g><title>futex_wait (10 samples, 1.55%)</title><rect x="96.7543%" y="181" width="1.5456%" height="15" fill="rgb(254,30,23)" fg:x="626" fg:w="10"/><text x="97.0043%" y="191.50"></text></g><g><title>futex_wait_queue_me (10 samples, 1.55%)</title><rect x="96.7543%" y="165" width="1.5456%" height="15" fill="rgb(235,160,14)" fg:x="626" fg:w="10"/><text x="97.0043%" y="175.50"></text></g><g><title>schedule (10 samples, 1.55%)</title><rect x="96.7543%" y="149" width="1.5456%" height="15" fill="rgb(212,155,44)" fg:x="626" fg:w="10"/><text x="97.0043%" y="159.50"></text></g><g><title>__sched_text_start (10 samples, 1.55%)</title><rect x="96.7543%" y="133" width="1.5456%" height="15" fill="rgb(226,2,50)" fg:x="626" fg:w="10"/><text x="97.0043%" y="143.50"></text></g><g><title>finish_task_switch (10 samples, 1.55%)</title><rect x="96.7543%" y="117" width="1.5456%" height="15" fill="rgb(234,177,6)" fg:x="626" fg:w="10"/><text x="97.0043%" y="127.50"></text></g><g><title>__perf_event_task_sched_in (10 samples, 1.55%)</title><rect x="96.7543%" y="101" width="1.5456%" height="15" fill="rgb(217,24,9)" fg:x="626" fg:w="10"/><text x="97.0043%" y="111.50"></text></g><g><title>perf_pmu_enable.part.0 (10 samples, 1.55%)</title><rect x="96.7543%" y="85" width="1.5456%" height="15" fill="rgb(220,13,46)" fg:x="626" fg:w="10"/><text x="97.0043%" y="95.50"></text></g><g><title>x86_pmu_enable (10 samples, 1.55%)</title><rect x="96.7543%" y="69" width="1.5456%" height="15" fill="rgb(239,221,27)" fg:x="626" fg:w="10"/><text x="97.0043%" y="79.50"></text></g><g><title>intel_tfa_pmu_enable_all (10 samples, 1.55%)</title><rect x="96.7543%" y="53" width="1.5456%" height="15" fill="rgb(222,198,25)" fg:x="626" fg:w="10"/><text x="97.0043%" y="63.50"></text></g><g><title>native_write_msr (10 samples, 1.55%)</title><rect x="96.7543%" y="37" width="1.5456%" height="15" fill="rgb(211,99,13)" fg:x="626" fg:w="10"/><text x="97.0043%" y="47.50"></text></g><g><title>__GI___clone (36 samples, 5.56%)</title><rect x="92.8903%" y="453" width="5.5641%" height="15" fill="rgb(232,111,31)" fg:x="601" fg:w="36"/><text x="93.1403%" y="463.50">__GI___..</text></g><g><title>start_thread (15 samples, 2.32%)</title><rect x="96.1360%" y="437" width="2.3184%" height="15" fill="rgb(245,82,37)" fg:x="622" fg:w="15"/><text x="96.3860%" y="447.50">s..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (15 samples, 2.32%)</title><rect x="96.1360%" y="421" width="2.3184%" height="15" fill="rgb(227,149,46)" fg:x="622" fg:w="15"/><text x="96.3860%" y="431.50">s..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (15 samples, 2.32%)</title><rect x="96.1360%" y="405" width="2.3184%" height="15" fill="rgb(218,36,50)" fg:x="622" fg:w="15"/><text x="96.3860%" y="415.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (15 samples, 2.32%)</title><rect x="96.1360%" y="389" width="2.3184%" height="15" fill="rgb(226,80,48)" fg:x="622" fg:w="15"/><text x="96.3860%" y="399.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (15 samples, 2.32%)</title><rect x="96.1360%" y="373" width="2.3184%" height="15" fill="rgb(238,224,15)" fg:x="622" fg:w="15"/><text x="96.3860%" y="383.50">c..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13 samples, 2.01%)</title><rect x="96.4451%" y="357" width="2.0093%" height="15" fill="rgb(241,136,10)" fg:x="624" fg:w="13"/><text x="96.6951%" y="367.50">s..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (13 samples, 2.01%)</title><rect x="96.4451%" y="341" width="2.0093%" height="15" fill="rgb(208,32,45)" fg:x="624" fg:w="13"/><text x="96.6951%" y="351.50">r..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (13 samples, 2.01%)</title><rect x="96.4451%" y="325" width="2.0093%" height="15" fill="rgb(207,135,9)" fg:x="624" fg:w="13"/><text x="96.6951%" y="335.50">r..</text></g><g><title>rayon_core::sleep::Sleep::sleep (11 samples, 1.70%)</title><rect x="96.7543%" y="309" width="1.7002%" height="15" fill="rgb(206,86,44)" fg:x="626" fg:w="11"/><text x="97.0043%" y="319.50"></text></g><g><title>__pthread_cond_wait (11 samples, 1.70%)</title><rect x="96.7543%" y="293" width="1.7002%" height="15" fill="rgb(245,177,15)" fg:x="626" fg:w="11"/><text x="97.0043%" y="303.50"></text></g><g><title>__pthread_cond_wait_common (11 samples, 1.70%)</title><rect x="96.7543%" y="277" width="1.7002%" height="15" fill="rgb(206,64,50)" fg:x="626" fg:w="11"/><text x="97.0043%" y="287.50"></text></g><g><title>futex_wait_cancelable (11 samples, 1.70%)</title><rect x="96.7543%" y="261" width="1.7002%" height="15" fill="rgb(234,36,40)" fg:x="626" fg:w="11"/><text x="97.0043%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (11 samples, 1.70%)</title><rect x="96.7543%" y="245" width="1.7002%" height="15" fill="rgb(213,64,8)" fg:x="626" fg:w="11"/><text x="97.0043%" y="255.50"></text></g><g><title>do_syscall_64 (11 samples, 1.70%)</title><rect x="96.7543%" y="229" width="1.7002%" height="15" fill="rgb(210,75,36)" fg:x="626" fg:w="11"/><text x="97.0043%" y="239.50"></text></g><g><title>exit_to_usermode_loop (1 samples, 0.15%)</title><rect x="98.2998%" y="213" width="0.1546%" height="15" fill="rgb(229,88,21)" fg:x="636" fg:w="1"/><text x="98.5498%" y="223.50"></text></g><g><title>do_signal (1 samples, 0.15%)</title><rect x="98.2998%" y="197" width="0.1546%" height="15" fill="rgb(252,204,47)" fg:x="636" fg:w="1"/><text x="98.5498%" y="207.50"></text></g><g><title>get_signal (1 samples, 0.15%)</title><rect x="98.2998%" y="181" width="0.1546%" height="15" fill="rgb(208,77,27)" fg:x="636" fg:w="1"/><text x="98.5498%" y="191.50"></text></g><g><title>do_group_exit (1 samples, 0.15%)</title><rect x="98.2998%" y="165" width="0.1546%" height="15" fill="rgb(221,76,26)" fg:x="636" fg:w="1"/><text x="98.5498%" y="175.50"></text></g><g><title>do_exit (1 samples, 0.15%)</title><rect x="98.2998%" y="149" width="0.1546%" height="15" fill="rgb(225,139,18)" fg:x="636" fg:w="1"/><text x="98.5498%" y="159.50"></text></g><g><title>acct_collect (1 samples, 0.15%)</title><rect x="98.2998%" y="133" width="0.1546%" height="15" fill="rgb(230,137,11)" fg:x="636" fg:w="1"/><text x="98.5498%" y="143.50"></text></g><g><title>_start (1 samples, 0.15%)</title><rect x="98.4544%" y="453" width="0.1546%" height="15" fill="rgb(212,28,1)" fg:x="637" fg:w="1"/><text x="98.7044%" y="463.50"></text></g><g><title>_dl_start (1 samples, 0.15%)</title><rect x="98.4544%" y="437" width="0.1546%" height="15" fill="rgb(248,164,17)" fg:x="637" fg:w="1"/><text x="98.7044%" y="447.50"></text></g><g><title>_dl_start_final (1 samples, 0.15%)</title><rect x="98.4544%" y="421" width="0.1546%" height="15" fill="rgb(222,171,42)" fg:x="637" fg:w="1"/><text x="98.7044%" y="431.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.15%)</title><rect x="98.4544%" y="405" width="0.1546%" height="15" fill="rgb(243,84,45)" fg:x="637" fg:w="1"/><text x="98.7044%" y="415.50"></text></g><g><title>dl_main (1 samples, 0.15%)</title><rect x="98.4544%" y="389" width="0.1546%" height="15" fill="rgb(252,49,23)" fg:x="637" fg:w="1"/><text x="98.7044%" y="399.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.15%)</title><rect x="98.4544%" y="373" width="0.1546%" height="15" fill="rgb(215,19,7)" fg:x="637" fg:w="1"/><text x="98.7044%" y="383.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="98.4544%" y="357" width="0.1546%" height="15" fill="rgb(238,81,41)" fg:x="637" fg:w="1"/><text x="98.7044%" y="367.50"></text></g><g><title>openaux (1 samples, 0.15%)</title><rect x="98.4544%" y="341" width="0.1546%" height="15" fill="rgb(210,199,37)" fg:x="637" fg:w="1"/><text x="98.7044%" y="351.50"></text></g><g><title>_dl_map_object (1 samples, 0.15%)</title><rect x="98.4544%" y="325" width="0.1546%" height="15" fill="rgb(244,192,49)" fg:x="637" fg:w="1"/><text x="98.7044%" y="335.50"></text></g><g><title>open_verify (1 samples, 0.15%)</title><rect x="98.4544%" y="309" width="0.1546%" height="15" fill="rgb(226,211,11)" fg:x="637" fg:w="1"/><text x="98.7044%" y="319.50"></text></g><g><title>__GI___pread64_nocancel (1 samples, 0.15%)</title><rect x="98.4544%" y="293" width="0.1546%" height="15" fill="rgb(236,162,54)" fg:x="637" fg:w="1"/><text x="98.7044%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="98.4544%" y="277" width="0.1546%" height="15" fill="rgb(220,229,9)" fg:x="637" fg:w="1"/><text x="98.7044%" y="287.50"></text></g><g><title>do_syscall_64 (1 samples, 0.15%)</title><rect x="98.4544%" y="261" width="0.1546%" height="15" fill="rgb(250,87,22)" fg:x="637" fg:w="1"/><text x="98.7044%" y="271.50"></text></g><g><title>__x64_sys_pread64 (1 samples, 0.15%)</title><rect x="98.4544%" y="245" width="0.1546%" height="15" fill="rgb(239,43,17)" fg:x="637" fg:w="1"/><text x="98.7044%" y="255.50"></text></g><g><title>vfs_read (1 samples, 0.15%)</title><rect x="98.4544%" y="229" width="0.1546%" height="15" fill="rgb(231,177,25)" fg:x="637" fg:w="1"/><text x="98.7044%" y="239.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.15%)</title><rect x="98.6090%" y="453" width="0.1546%" height="15" fill="rgb(219,179,1)" fg:x="638" fg:w="1"/><text x="98.8590%" y="463.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.15%)</title><rect x="98.7635%" y="421" width="0.1546%" height="15" fill="rgb(238,219,53)" fg:x="639" fg:w="1"/><text x="99.0135%" y="431.50"></text></g><g><title>__do_execve_file.isra.0 (1 samples, 0.15%)</title><rect x="98.7635%" y="405" width="0.1546%" height="15" fill="rgb(232,167,36)" fg:x="639" fg:w="1"/><text x="99.0135%" y="415.50"></text></g><g><title>search_binary_handler (1 samples, 0.15%)</title><rect x="98.7635%" y="389" width="0.1546%" height="15" fill="rgb(244,19,51)" fg:x="639" fg:w="1"/><text x="99.0135%" y="399.50"></text></g><g><title>load_elf_binary (1 samples, 0.15%)</title><rect x="98.7635%" y="373" width="0.1546%" height="15" fill="rgb(224,6,22)" fg:x="639" fg:w="1"/><text x="99.0135%" y="383.50"></text></g><g><title>setup_arg_pages (1 samples, 0.15%)</title><rect x="98.7635%" y="357" width="0.1546%" height="15" fill="rgb(224,145,5)" fg:x="639" fg:w="1"/><text x="99.0135%" y="367.50"></text></g><g><title>shift_arg_pages (1 samples, 0.15%)</title><rect x="98.7635%" y="341" width="0.1546%" height="15" fill="rgb(234,130,49)" fg:x="639" fg:w="1"/><text x="99.0135%" y="351.50"></text></g><g><title>move_page_tables (1 samples, 0.15%)</title><rect x="98.7635%" y="325" width="0.1546%" height="15" fill="rgb(254,6,2)" fg:x="639" fg:w="1"/><text x="99.0135%" y="335.50"></text></g><g><title>flush_tlb_mm_range (1 samples, 0.15%)</title><rect x="98.7635%" y="309" width="0.1546%" height="15" fill="rgb(208,96,46)" fg:x="639" fg:w="1"/><text x="99.0135%" y="319.50"></text></g><g><title>flush_tlb_func_common.constprop.0 (1 samples, 0.15%)</title><rect x="98.7635%" y="293" width="0.1546%" height="15" fill="rgb(239,3,39)" fg:x="639" fg:w="1"/><text x="99.0135%" y="303.50"></text></g><g><title>native_flush_tlb_one_user (1 samples, 0.15%)</title><rect x="98.7635%" y="277" width="0.1546%" height="15" fill="rgb(233,210,1)" fg:x="639" fg:w="1"/><text x="99.0135%" y="287.50"></text></g><g><title>do_exit (1 samples, 0.15%)</title><rect x="98.9181%" y="357" width="0.1546%" height="15" fill="rgb(244,137,37)" fg:x="640" fg:w="1"/><text x="99.1681%" y="367.50"></text></g><g><title>mmput (1 samples, 0.15%)</title><rect x="98.9181%" y="341" width="0.1546%" height="15" fill="rgb(240,136,2)" fg:x="640" fg:w="1"/><text x="99.1681%" y="351.50"></text></g><g><title>exit_mmap (1 samples, 0.15%)</title><rect x="98.9181%" y="325" width="0.1546%" height="15" fill="rgb(239,18,37)" fg:x="640" fg:w="1"/><text x="99.1681%" y="335.50"></text></g><g><title>unmap_vmas (1 samples, 0.15%)</title><rect x="98.9181%" y="309" width="0.1546%" height="15" fill="rgb(218,185,22)" fg:x="640" fg:w="1"/><text x="99.1681%" y="319.50"></text></g><g><title>unmap_single_vma (1 samples, 0.15%)</title><rect x="98.9181%" y="293" width="0.1546%" height="15" fill="rgb(225,218,4)" fg:x="640" fg:w="1"/><text x="99.1681%" y="303.50"></text></g><g><title>unmap_page_range (1 samples, 0.15%)</title><rect x="98.9181%" y="277" width="0.1546%" height="15" fill="rgb(230,182,32)" fg:x="640" fg:w="1"/><text x="99.1681%" y="287.50"></text></g><g><title>zap_pte_range.isra.0 (1 samples, 0.15%)</title><rect x="98.9181%" y="261" width="0.1546%" height="15" fill="rgb(242,56,43)" fg:x="640" fg:w="1"/><text x="99.1681%" y="271.50"></text></g><g><title>mark_page_accessed (1 samples, 0.15%)</title><rect x="98.9181%" y="245" width="0.1546%" height="15" fill="rgb(233,99,24)" fg:x="640" fg:w="1"/><text x="99.1681%" y="255.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.46%)</title><rect x="98.7635%" y="453" width="0.4637%" height="15" fill="rgb(234,209,42)" fg:x="639" fg:w="3"/><text x="99.0135%" y="463.50"></text></g><g><title>do_syscall_64 (3 samples, 0.46%)</title><rect x="98.7635%" y="437" width="0.4637%" height="15" fill="rgb(227,7,12)" fg:x="639" fg:w="3"/><text x="99.0135%" y="447.50"></text></g><g><title>exit_to_usermode_loop (2 samples, 0.31%)</title><rect x="98.9181%" y="421" width="0.3091%" height="15" fill="rgb(245,203,43)" fg:x="640" fg:w="2"/><text x="99.1681%" y="431.50"></text></g><g><title>do_signal (2 samples, 0.31%)</title><rect x="98.9181%" y="405" width="0.3091%" height="15" fill="rgb(238,205,33)" fg:x="640" fg:w="2"/><text x="99.1681%" y="415.50"></text></g><g><title>get_signal (2 samples, 0.31%)</title><rect x="98.9181%" y="389" width="0.3091%" height="15" fill="rgb(231,56,7)" fg:x="640" fg:w="2"/><text x="99.1681%" y="399.50"></text></g><g><title>do_group_exit (2 samples, 0.31%)</title><rect x="98.9181%" y="373" width="0.3091%" height="15" fill="rgb(244,186,29)" fg:x="640" fg:w="2"/><text x="99.1681%" y="383.50"></text></g><g><title>mm_update_next_owner (1 samples, 0.15%)</title><rect x="99.0726%" y="357" width="0.1546%" height="15" fill="rgb(234,111,31)" fg:x="641" fg:w="1"/><text x="99.3226%" y="367.50"></text></g><g><title>all (647 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="647"/><text x="0.2500%" y="495.50"></text></g><g><title>wasmtime (642 samples, 99.23%)</title><rect x="0.7728%" y="469" width="99.2272%" height="15" fill="rgb(249,206,44)" fg:x="5" fg:w="642"/><text x="1.0228%" y="479.50">wasmtime</text></g><g><title>page_fault (5 samples, 0.77%)</title><rect x="99.2272%" y="453" width="0.7728%" height="15" fill="rgb(251,153,30)" fg:x="642" fg:w="5"/><text x="99.4772%" y="463.50"></text></g></svg></svg>